#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1226 0 17 3 36 #";; Programming Languages, Homework 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 3 #")) "
0 0 17 3 39 #";; so we can put tests in a second file"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 61
#";; definition of structures for MUPL programs - Do NOT change"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"string"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 32 #";; a variable, e.g., (var \"foo\")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"int"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"num"
0 0 25 3 5 #")    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 36 #";; a constant number, e.g., (int 17)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"add"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 22 #";; add two expressions"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"ifgreater"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e4"
0 0 25 3 5 #")    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 29 #";; if e1 > e2 then e3 else e4"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"nameopt"
0 0 25 3 1 #" "
0 0 14 3 6 #"formal"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 37 #";; a recursive(?) 1-argument function"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"call"
0 0 25 3 2 #" ("
0 0 14 3 6 #"funexp"
0 0 25 3 1 #" "
0 0 14 3 6 #"actual"
0 0 25 3 8 #")       "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 16 #";; function call"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"mlet"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 41 #";; a local binding (let var = e in body) "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 6 #")     "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 18 #";; make a new pair"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"fst"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 25 3 5 #")    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 27 #";; get first part of a pair"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"snd"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 25 3 5 #")    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 28 #";; get second part of a pair"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"aunit"
0 0 25 3 7 #" ()    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 39 #";; unit value -- good for ending a list"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"isaunit"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 36 #";; evaluate to 1 if e is unit else 0"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 96
(
 #";; a closure is not in \"source\" programs but /is/ a MUPL value; it"
 #" is what functions evaluate to"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"closure"
0 0 25 3 2 #" ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; CHANGE (put your solutions here)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"racketlist->mupllist"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 3 #") ("
0 0 14 3 5 #"aunit"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 3 #") ("
0 0 14 3 5 #"aunit"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 3 #") ("
0 0 14 3 20 #"racketlist->mupllist"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"rktlist"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"mupllist->racketlist"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"aunit?"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"aunit?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 3 #") ("
0 0 14 3 20 #"mupllist->racketlist"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupllist"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; lookup a variable in an environment"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";; Do NOT change this function"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";; list(pair(variable_name,variable_value))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"unbound variable during evaluation\""
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")) "
0 0 14 3 3 #"str"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #") "
0 0 14 3 3 #"str"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";; Do NOT change the two cases given to you.  "
0 0 25 29 1 #"\n"
0 0 17 3 57 #";; DO add more cases for other kinds of MUPL expressions."
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; We will test eval-under-env by calling it directly even though"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; \"in real life\" it would be a helper function of eval-exp."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 4 #"var?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"var-string"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"int?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 1 #"e"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"closure?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 1 #"e"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"aunit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 1 #"e"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"add?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"add-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"add-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 7 #"int-num"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"MUPL addition applied to non-number\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"fun?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 7 #"closure"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 10 #"ifgreater?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ifgreater-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ifgreater-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"int-num"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ifgreater-e3"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"ifgreater-e4"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 38 #"\"MUPL ifgreater applied to non-number\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"mlet?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 8 #"variable"
0 0 25 3 2 #" ("
0 0 14 3 8 #"mlet-var"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 5 #"value"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"mlet-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 4 #") ])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"mlet-body"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 8 #"variable"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"call?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 11 #"call-funexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 11 #"call-actual"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"closure?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 11 #"closure-fun"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ["
0 0 14 3 4 #"body"
0 0 25 3 2 #" ("
0 0 14 3 8 #"fun-body"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ["
0 0 14 3 7 #"clo-env"
0 0 25 3 2 #" ("
0 0 14 3 11 #"closure-env"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ["
0 0 14 3 8 #"fun-name"
0 0 25 3 2 #" ("
0 0 14 3 11 #"fun-nameopt"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ["
0 0 14 3 7 #"fun-arg"
0 0 25 3 2 #" ("
0 0 14 3 10 #"fun-formal"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 8 #"fun-name"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                     ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 7 #"fun-arg"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #")("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 8 #"fun-name"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 14 3 7 #"clo-env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                     ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 7 #"fun-arg"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #") "
0 0 14 3 7 #"clo-env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 56
#"\"MUPL call's first subexpression is not a valid closure\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 5 #"apair"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"fst?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"fst-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 38 #"\"MUPL fst applied to non-pair element\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"snd?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"snd-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 38 #"\"MUPL snd applied to non-pair element\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"isaunit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"isaunit-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"aunit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 25 3 18 #"                  "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 29 #";; CHANGE add more cases here"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 2 #" ("
0 0 14 3 6 #"format"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"bad MUPL expression: ~v\""
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";; Do NOT change"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ifaunit"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 4 #")  ("
0 0 14 3 9 #"ifgreater"
0 0 25 3 2 #" ("
0 0 14 3 7 #"isaunit"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 3 #" ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"mlet*"
0 0 25 3 1 #" "
0 0 14 3 6 #"lstlst"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 6 #"lstlst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 2 #"e2"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"mlet"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 6 #"lstlst"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 6 #"lstlst"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"mlet*"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 6 #"lstlst"
0 0 25 3 2 #") "
0 0 14 3 2 #"e2"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 17 3 23 #"; if (e1 > e2 ) then e4"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; else if (e2 > e1) then e4"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"ifeq"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e4"
0 0 25 3 3 #") ("
0 0 14 3 4 #"mlet"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_x\""
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 2 #" ("
0 0 14 3 4 #"mlet"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_y\""
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ifgreater"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_x\""
0 0 25 3 3 #") ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_y\""
0 0 25 3 2 #") "
0 0 14 3 2 #"e4"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ifgreater"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_y\""
0 0 25 3 3 #") ("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"_x\""
0 0 25 3 2 #") "
0 0 14 3 2 #"e4"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"mupl-map"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"mupl-mapAddN"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"mlet"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"map"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 8 #"mupl-map"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 19 3 1 #"\""
0 0 19 3 6 #"CHANGE"
0 0 19 3 2 #" ("
0 0 19 3 6 #"notice"
0 0 19 3 1 #" "
0 0 19 3 3 #"map"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"now"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"MUPL"
0 0 19 3 1 #" "
0 0 19 3 6 #"scope)"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Challenge Problem"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 13 #"fun-challenge"
0 0 25 3 2 #" ("
0 0 14 3 7 #"nameopt"
0 0 25 3 1 #" "
0 0 14 3 6 #"formal"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 8 #"freevars"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 37 #";; a recursive(?) 1-argument function"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; We will test this function directly, so it must do"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; as described in the assignment"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"compute-free-vars"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 63
#";; Do NOT share code with eval-under-env because that will make"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";; auto-grading and peer assessment more difficult, so"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; copy most of your interpreter here and make minor changes"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"eval-under-env-c"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 7 #"CHANGE\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";; Do NOT change this"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"eval-exp-c"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"eval-under-env-c"
0 0 25 3 2 #" ("
0 0 14 3 17 #"compute-free-vars"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0           0
